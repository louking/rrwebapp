"""support flask application

Revision ID: 127a55972386
Revises: 4b5ad1ebeb97
Create Date: 2014-01-15 11:49:08.589000

"""

# revision identifiers, used by Alembic.
revision = '127a55972386'
down_revision = '4b5ad1ebeb97'

from alembic import op
import sqlalchemy as sa

from sqlalchemy.sql import table, column
from werkzeug.security import generate_password_hash

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('club',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shname', sa.String(length=10), nullable=True),
    sa.Column('name', sa.String(length=40), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('shname')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('pw_hash', sa.String(length=80), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('pwresetrequired', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=10), nullable=True),
    sa.Column('club_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['club_id'], ['club.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'club_id')
    )
    op.create_table('exclusion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('club_id', sa.Integer(), nullable=True),
    sa.Column('foundname', sa.String(length=40), nullable=True),
    sa.Column('runnerid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['club_id'], ['club.id'], ),
    sa.ForeignKeyConstraint(['runnerid'], ['runner.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('foundname', 'runnerid', 'club_id')
    )
    op.create_table('userrole',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.UniqueConstraint('user_id', 'role_id')
    )
    op.add_column(u'divisions', sa.Column('club_id', sa.Integer(), nullable=True))
    op.add_column(u'divisions', sa.Column('year', sa.Integer(), nullable=True))
    op.add_column(u'race', sa.Column('club_id', sa.Integer(), nullable=True))
    op.add_column(u'race', sa.Column('surface', sa.Enum('road', 'track', 'trail', name='SurfaceType'), nullable=True))
    op.drop_constraint(u'name', 'race',type_='unique')
    op.create_unique_constraint(None, 'race', ['name', 'year', 'club_id'])
    op.add_column(u'raceresult', sa.Column('club_id', sa.Integer(), nullable=True))
    op.add_column(u'raceresult', sa.Column('instandings', sa.Boolean(), nullable=True))
    # needed to reverse next two lines, else
    #   sqlalchemy.exc.OperationalError: (OperationalError) (1553, "Cannot drop index 'runnerid': needed in a foreign key constraint") 'ALTER TABLE raceresult DROP INDEX runnerid' ()
    op.create_unique_constraint(None, 'raceresult', ['runnerid', 'runnername', 'raceid', 'seriesid', 'club_id'])
    op.drop_constraint(u'runnerid', 'raceresult',type_='unique')
    op.add_column(u'runner', sa.Column('club_id', sa.Integer(), nullable=True))
    op.add_column(u'runner', sa.Column('renewdate', sa.String(length=10), nullable=True))
    op.drop_constraint(u'name', 'runner',type_='unique')
    op.create_unique_constraint(None, 'runner', ['name', 'dateofbirth', 'club_id'])
    op.add_column(u'series', sa.Column('club_id', sa.Integer(), nullable=True))
    op.add_column(u'series', sa.Column('year', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'series', ['name', 'year', 'club_id'])
    ### end Alembic commands ###

    # on upgrade, create initial clubs, roles, owner user
    club = table(u'club',
                 column('id', sa.Integer),
                 column('shname', sa.String),
                 column('name', sa.String),
                )
    role = table(u'role',
                 column('id', sa.Integer),
                 column('name', sa.String),
                 column('club_id', sa.Integer),
                )
    user = table(u'user',
                 column('id', sa.Integer),
                 column('email', sa.String),
                 column('name', sa.String),
                 column('pw_hash', sa.String),
                 column('active', sa.Boolean),
                 column('pwresetrequired', sa.Boolean),
                )
    userrole = table(u'userrole',
                     column('user_id', sa.Integer),
                     column('role_id', sa.Integer),
                    )

    op.bulk_insert(club,
                   [
                    {'id':1,'shname':'owner','name':'owner'},
                    {'id':2,'shname':'fsrc','name':'Frederick Steeplechaser Running Club'},
                   ]
                  )
    
    op.bulk_insert(role,
                   [
                    {'id':1,'name':'owner','club_id':1},
                    {'id':2,'name':'admin','club_id':2},
                    {'id':3,'name':'viewer','club_id':2},
                   ]
                   )
    
    op.bulk_insert(user,
                   [
                    {'id':1,'email':'lking@pobox.com','name':'Lou King',
                     'pw_hash':generate_password_hash('password'),'active':True,'pwresetrequired':False},
                   ]
                   )
    
    op.bulk_insert(userrole,
                   [
                    {'user_id':1,'role_id':1},
                    {'user_id':1,'role_id':2},
                    {'user_id':1,'role_id':3},
                   ]
                   )

    # update existing tables as appropriate
    divisions = table(u'divisions',
                      column('club_id', sa.Integer),
                      column('year', sa.Integer),
                     )
    race = table(u'race',
                 column('club_id', sa.Integer),
                 column('name', sa.String),
                 column('distance', sa.Float),
                 column('surface', sa.Enum),
                )
    raceresult = table(u'raceresult',
                       column('club_id', sa.Integer),
                       column('instandings', sa.Boolean),
                      )
    runner = table(u'runner',
                   column('club_id', sa.Integer),
                   column('renewdate', sa.String),
                  )
    series = table(u'series',
                   column('club_id', sa.Integer),
                   column('year', sa.Integer),
                  )

    op.execute(divisions.update().values({'club_id':op.inline_literal(2),'year':op.inline_literal(2013)}))
    op.execute(race.update().values({'club_id':op.inline_literal(2)}))
    op.execute(raceresult.update().values({'club_id':op.inline_literal(2)}))
    op.execute(raceresult.update().values({'instandings':op.inline_literal(1)}))
    op.execute(runner.update().values({'club_id':op.inline_literal(2),'renewdate':op.inline_literal('')}))
    op.execute(series.update().values({'club_id':op.inline_literal(2),'year':op.inline_literal(2013)}))

    # set race.surface based on distance, update a few races which don't match distance criteria
    op.execute(race.update().where(race.c.distance<=op.inline_literal(3)).values({'surface':op.inline_literal('track')}))
    op.execute(race.update().where(race.c.distance>op.inline_literal(3)).values({'surface':op.inline_literal('road')}))
    op.execute(race.update().where(race.c.name==op.inline_literal('Market Street Mile')).values({'surface':op.inline_literal('road')}))
    op.execute(race.update().where(race.c.name==op.inline_literal('JFK 50 Mile Run')).values({'surface':op.inline_literal('trail')}))
    op.execute(race.update().where(race.c.name==op.inline_literal('Catoctin 50K')).values({'surface':op.inline_literal('trail')}))


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'series')
    op.drop_column(u'series', 'year')
    op.drop_column(u'series', 'club_id')
    op.drop_constraint(None, 'runner')
    op.create_unique_constraint(u'name', 'runner', ['name', 'dateofbirth'])
    op.drop_column(u'runner', 'renewdate')
    op.drop_column(u'runner', 'club_id')
    op.drop_constraint(None, 'raceresult')
    op.create_unique_constraint(u'runnerid', 'raceresult', ['runnerid', 'runnername', 'raceid', 'seriesid'])
    op.drop_column(u'raceresult', 'instandings')
    op.drop_column(u'raceresult', 'club_id')
    op.drop_constraint(None, 'race')
    op.create_unique_constraint(u'name', 'race', ['name', 'year'])
    op.drop_column(u'race', 'surface')
    op.drop_column(u'race', 'club_id')
    op.drop_column(u'divisions', 'year')
    op.drop_column(u'divisions', 'club_id')
    op.drop_table('userrole')
    op.drop_table('exclusion')
    op.drop_table('role')
    op.drop_table('user')
    op.drop_table('club')
    ### end Alembic commands ###
