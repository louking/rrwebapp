"""results analysis plus other pending changes - 2.5

Revision ID: c471bfff1a49
Revises: 57987a415db1
Create Date: 2016-09-22 14:42:06.170000

"""

# revision identifiers, used by Alembic.
revision = 'c471bfff1a49'
down_revision = '57987a415db1'

from alembic import op
import sqlalchemy as sa

#added
from sqlalchemy.sql import table, column

# note we need the id to identify rows when column requires data specific to the row
raceresult = table('raceresult',
               column('id', sa.Integer),
               column('runnerid', sa.Integer),
               column('overallplace', sa.Float),
               column('genderplace', sa.Float),
               column('divisionplace', sa.Float),
               column('overallpoints', sa.Float),
               column('genderpoints', sa.Float),
               column('divisionpoints', sa.Float),
               column('source', sa.String),
               column('sourceid', sa.String),
               column('fuzzyage', sa.Boolean),
              )
race = table('race',
               column('external', sa.Boolean),
               column('location', sa.String),
              )
series = table('series',
               column('allowties', sa.Boolean),
               column('description', sa.String),
              )

#end added


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apicredentials',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=20), nullable=True),
        sa.Column('key', sa.String(length=1024), nullable=True),
        sa.Column('secret', sa.String(length=1024), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
        )
    op.create_table('raceresultservice',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('club_id', sa.Integer(), nullable=True),
        sa.Column('apicredentials_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['apicredentials_id'], ['apicredentials.id'], ),
        sa.ForeignKeyConstraint(['club_id'], ['club.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    op.create_table('useraccesstoken',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('apicredentials_id', sa.Integer(), nullable=True),
        sa.Column('accesstoken', sa.String(length=1024), nullable=True),
        sa.ForeignKeyConstraint(['apicredentials_id'], ['apicredentials.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'apicredentials_id')
        )
    op.add_column('club', sa.Column('memberserviceapi', sa.String(length=20), nullable=True))
    op.add_column('club', sa.Column('memberserviceid', sa.String(length=64), nullable=True))
    op.create_foreign_key(None, 'divisions', 'club', ['club_id'], ['id'])
    op.add_column('race', sa.Column('external', sa.Boolean(), nullable=True))
    op.add_column('race', sa.Column('location', sa.String(length=64), nullable=True))
    op.create_foreign_key(None, 'race', 'club', ['club_id'], ['id'])
    op.add_column('raceresult', sa.Column('divisionpoints', sa.Float(), nullable=True))
    op.add_column('raceresult', sa.Column('fuzzyage', sa.Boolean(), nullable=True))
    op.add_column('raceresult', sa.Column('genderpoints', sa.Float(), nullable=True))
    op.add_column('raceresult', sa.Column('overallpoints', sa.Float(), nullable=True))
    op.add_column('raceresult', sa.Column('source', sa.String(length=20), nullable=True))
    op.add_column('raceresult', sa.Column('sourceid', sa.String(length=128), nullable=True))
    op.create_foreign_key(None, 'raceresult', 'club', ['club_id'], ['id'])
    op.create_foreign_key(None, 'runner', 'club', ['club_id'], ['id'])
    op.add_column('series', sa.Column('allowties', sa.Boolean(), nullable=True))
    op.add_column('series', sa.Column('description', sa.String(length=20), nullable=True))
    op.create_foreign_key(None, 'series', 'club', ['club_id'], ['id'])
    ### end Alembic commands ###

    #added

    # set simple initial values
    op.execute(race.update().values({
        'external':op.inline_literal(False), 
        'location':op.inline_literal(''),
        }))
    op.execute(series.update().values({
        'allowties':op.inline_literal(True), 
        'description':op.inline_literal(''),
        }))
    op.execute(raceresult.update().values({
        'fuzzyage':op.inline_literal(False), 
        'source':op.inline_literal('scoretility'),
        }))

    # row specific values
    # we build a quick link for the current connection of alembic
    # adapted from https://julo.ch/blog/migrating-content-with-alembic
    connection = op.get_bind()
    for thisresult in connection.execute(raceresult.select()):

        connection.execute(
            raceresult.update().where(
                raceresult.c.id == thisresult.id
            ).values(
                sourceid=thisresult.runnerid,
                overallpoints=thisresult.overallplace,
                divisionpoints=thisresult.divisionplace,
                genderpoints=thisresult.genderplace,
            )
        )

    #end added

def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'series', type_='foreignkey')
    op.drop_column('series', 'description')
    op.drop_column('series', 'allowties')
    op.drop_constraint(None, 'runner', type_='foreignkey')
    op.drop_constraint(None, 'raceresult', type_='foreignkey')
    op.drop_column('raceresult', 'sourceid')
    op.drop_column('raceresult', 'source')
    op.drop_column('raceresult', 'overallpoints')
    op.drop_column('raceresult', 'genderpoints')
    op.drop_column('raceresult', 'fuzzyage')
    op.drop_column('raceresult', 'divisionpoints')
    op.drop_constraint(None, 'race', type_='foreignkey')
    op.drop_column('race', 'location')
    op.drop_column('race', 'external')
    op.drop_constraint(None, 'divisions', type_='foreignkey')
    op.drop_column('club', 'memberserviceid')
    op.drop_column('club', 'memberserviceapi')
    op.drop_table('useraccesstoken')
    op.drop_table('raceresultservice')
    op.drop_table('apicredentials')
    ### end Alembic commands ###
