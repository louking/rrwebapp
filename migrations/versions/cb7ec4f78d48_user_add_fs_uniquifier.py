"""User: add fs_uniquifier

Revision ID: cb7ec4f78d48
Revises: 86f57ce8ce48
Create Date: 2022-08-09 15:49:07.836292

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cb7ec4f78d48'
down_revision = '86f57ce8ce48'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # see https://flask-security-too.readthedocs.io/en/stable/changelog.html#db-migration
    op.add_column('user', sa.Column('fs_uniquifier', sa.String(length=255), nullable=True))
    op.create_unique_constraint(None, 'user', ['fs_uniquifier'])
    # ### end Alembic commands ###

    # see https://flask-security-too.readthedocs.io/en/stable/changelog.html#db-migration
    # update existing rows with unique fs_uniquifier
    import uuid
    user_table = sa.Table('user', sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True),
                        sa.Column('fs_uniquifier', sa.String))
    conn = op.get_bind()
    for row in conn.execute(sa.select([user_table.c.id])):
        conn.execute(user_table.update().values(fs_uniquifier=uuid.uuid4().hex).where(user_table.c.id == row['id']))

    # finally - set nullable to false
    # for MySQL the previous line has to be replaced with...
    op.alter_column('user', 'fs_uniquifier', existing_type=sa.String(length=255), nullable=False)

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='unique')
    op.drop_column('user', 'fs_uniquifier')
    # ### end Alembic commands ###
